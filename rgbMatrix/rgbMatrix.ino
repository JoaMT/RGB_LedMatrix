// Code By Jesús Ortega Abad 2020

// Librería FastLED para controlar los leds con mucha mas facilidad y buen rendimiento
#include <FastLED.h>

// 513 pixeles en total
#define NUM_LEDS 513
#define MATRIX_WIDTH 27
#define MATRIX_HEIGHT 19

// Pin de salida de datos a la matriz
#define DATA_PIN 9

// Array CRGB de FastLED para controlar matriz led rgb
CRGB leds[NUM_LEDS];

// Juego de caracteres para el texto de la marquesina
const unsigned char abecedario[43][10] PROGMEM = {
    {
    B01100000,  //A
    B10010000,
    B10010000,
    B10010000,
    B11110000,
    B10010000,
    B10010000,
    B10010000,
    B10010000,
    5},
    {
    B11100000,  //B
    B10010000,
    B10010000,
    B10010000,
    B11100000,
    B10010000,
    B10010000,
    B10010000,
    B11100000,
    5},
    {
    B01100000,  //C
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B01100000,
    4},
    {
    B11000000,  //D
    B10100000,
    B10010000,
    B10010000,
    B10010000,
    B10010000,
    B10010000,
    B10100000,
    B11000000,
    5},
    {
    B11100000,  //E
    B10000000,
    B10000000,
    B10000000,
    B11100000,
    B10000000,
    B10000000,
    B10000000,
    B11100000,
    4},
    {
    B11110000,  //F
    B10000000,
    B10000000,
    B10000000,
    B11100000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    5},
    {
    B01100000,  //G******
    B10010000,
    B10000000,
    B10000000,
    B10110000,
    B10010000,
    B10010000,
    B10010000,
    B01110000,
    5},
    {
    B10010000,  //H
    B10010000,
    B10010000,
    B10010000,
    B11110000,
    B10010000,
    B10010000,
    B10010000,
    B10010000,
    5},
    {
    B10000000,  //I
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    2},
    {
    B00010000,  //J
    B00010000,
    B00010000,
    B00010000,
    B00010000,
    B00010000,
    B00010000,
    B10010000,
    B01100000,
    5},
    {
    B10001000,  //K*******
    B10010000,
    B10100000,
    B11000000,
    B10000000,
    B11000000,
    B10100000,
    B10010000,
    B10001000,
    6},
    {
    B10000000,  //L
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    B11110000,
    5},
    {
    B10001000,  //M*******
    B11011000,
    B11011000,
    B10101000,
    B10101000,
    B10001000,
    B10001000,
    B10001000,
    B10001000,
    6},
    {
    B10001000,  //N*****
    B11001000,
    B11001000,
    B10101000,
    B10101000,
    B10011000,
    B10011000,
    B10001000,
    B10001000,
    6},
    {
    B01100000,  //O******
    B10010000,
    B10010000,
    B10010000,
    B10010000,
    B10010000,
    B10010000,
    B10010000,
    B01100000,
    5},
    {
    B11100000,  //P
    B10010000,
    B10010000,
    B10010000,
    B11100000,
    B10000000,
    B10000000,
    B10000000,
    B10000000,
    5},
    {
    B01110000,  //Q********
    B10001000,
    B10001000,
    B10001000,
    B10001000,
    B10001000,
    B10101000,
    B10010000,
    B01101000,
    6},
    {
    B11110000,  //R*****
    B10001000,
    B10001000,
    B10001000,
    B11110000,
    B11000000,
    B10100000,
    B10010000,
    B10001000,
    6},
    {
    B01110000,  //S
    B10000000,
    B10000000,
    B10000000,
    B01100000,
    B00010000,
    B00010000,
    B00010000,
    B11100000,
    5},
    {
    B11100000,  //T*****
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    4},
    {
    B10010000,  //U
    B10010000,
    B10010000,
    B10010000,
    B10010000,
    B10010000,
    B10010000,
    B10010000,
    B01100000,
    5},
    {
    B10001000,  //V****
    B10001000,
    B10001000,
    B10001000,
    B10001000,
    B01010000,
    B01010000,
    B00100000,
    B00100000,
    6},
    {
    B10001000,  //W****
    B10001000,
    B10001000,
    B10001000,
    B10101000,
    B10101000,
    B10101000,
    B10101000,
    B01010000,
    6},
    {
    B10001000,  //X
    B10001000,
    B01010000,
    B01010000,
    B00100000,
    B01010000,
    B01010000,
    B10001000,
    B10001000,
    6},
    {
    B10001000,  //Y
    B10001000,
    B10001000,
    B10001000,
    B01010000,
    B00100000,
    B00100000,
    B00100000,
    B00100000,
    6},
    {
    B11111000,  //Z
    B00001000,
    B00001000,
    B00010000,
    B00100000,
    B01000000,
    B10000000,
    B10000000,
    B11111000,
    6},
    {
    B01011000,  //Ñ*****
    B10100000,
    B00000000,
    B10001000,
    B11001000,
    B10101000,
    B10011000,
    B10001000,
    B10001000,
    6},
    {
    B00000000,  //.
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B11000000,
    B11000000,
    3},
    {
    B00000000,  //,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    B01000000,
    B01000000,
    B10000000,
    3},
    {
    B01100000,  //?
    B10010000,
    B00010000,
    B00010000,
    B00100000,
    B01000000,
    B01000000,
    B00000000,
    B01000000,
    5},
    {
    B00100000,  //¿
    B00000000,
    B00100000,
    B00100000,
    B01000000,
    B10000000,
    B10000000,
    B10010000,
    B01100000,
    5},
    {
    B01000000,  //!
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    B00000000,
    B01000000,
    3},
    {
    B01110000,  //0
    B10001000,
    B10011000,
    B10101000,
    B10101000,
    B10101000,
    B11001000,
    B10001000,
    B01110000,
    6},
    {
    B01000000,  //1
    B11000000,
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    B01000000,
    B11100000,
    4},
    {
    B01100000,  //2
    B10010000,
    B00010000,
    B00010000,
    B00100000,
    B00100000,
    B01000000,
    B01000000,
    B11100000,
    5},
    {
    B01100000,  //3
    B10010000,
    B00010000,
    B00010000,
    B01100000,
    B00010000,
    B00010000,
    B10010000,
    B01100000,
    5},
    {
    B10010000,  //4
    B10010000,
    B10010000,
    B10010000,
    B11110000,
    B00010000,
    B00010000,
    B00010000,
    B00010000,
    5},
    {
    B11110000,  //5
    B10000000,
    B10000000,
    B10000000,
    B11100000,
    B0001000,
    B00010000,
    B10010000,
    B01100000,
    5},
    {
    B00110000,  //6
    B01000000,
    B10000000,
    B10000000,
    B11100000,
    B10010000,
    B10010000,
    B10010000,
    B01100000,
    5},
    {
    B11110000,  //7
    B00010000,
    B00010000,
    B00100000,
    B00100000,
    B01000000,
    B01000000,
    B10000000,
    B10000000,
    5},
    {
    B01110000,  //8
    B10001000,
    B10001000,
    B01010000,
    B00100000,
    B01010000,
    B10001000,
    B10001000,
    B01110000,
    6},
    {
    B01110000,  //9
    B10001000,
    B10001000,
    B10001000,
    B01111000,
    B00001000,
    B00001000,
    B10001000,
    B01110000,
    6},
    {
    B00000000,  //-
    B00000000,
    B00000000,
    B00000000,
    B11110000,
    B00000000,
    B00000000,
    B00000000,
    B00000000,
    5},
};

// Animacion pacman
const unsigned char pacman[4][10] PROGMEM = {
    {
    B00011000, 
    B00111100,
    B01111110,
    B11111110,
    B11111111,
    B11111111,
    B11111110,
    B01111110,
    B00111100,
    B00011000}, // amarillo
    {
    B00011000,  
    B00111100,
    B01111110,
    B11111110,
    B11111100,
    B11110000,
    B11111100,
    B01111110,
    B00111100,
    B00011000}, // amarillo
    {
    B00011000,  
    B00111100,
    B01111100,
    B11111000,
    B11110000,
    B11100000,
    B11110000,
    B01111000,
    B00111100,
    B00011000}, // amarillo
    {
    B00011000,  
    B00111100,
    B01111110,
    B11111110,
    B11111100,
    B11110000,
    B11111100,
    B01111110,
    B00111100,
    B00011000}, // amarillo
};

// Animacion fantasma
const unsigned char fantasma[2][10] PROGMEM = {
    {
    B00011100, 
    B00111110,
    B00101010,
    B01111111,
    B01111111,
    B01101011,
    B01010101,
    B01111111,
    B01111111,
    B01010101}, // amarillo
    {
    B00011100, 
    B00111110,
    B00101010,
    B01111111,
    B01111111,
    B01101011,
    B01010101,
    B01111111,
    B01111111,
    B00101010}, // amarillo
};

// Imagen smiley
const unsigned char ledarray[] PROGMEM = {
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x66, 0x66, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x66, 0x66, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x66, 0x66, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x66, 0x66, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x66, 0x66, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x00, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x00, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x00, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x00, 0x06, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x78, 0x6A, 0x06, 0x00, 0x00, 0x03, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x00, 0x03, 0x78, 0x6A, 0x06, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x00, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x00, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x66, 0x66, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x03, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x00, 0x00, 0x66, 0x66, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x00, 0x03, 0x66, 0x66, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x66, 0x66, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x79, 0x73, 0x00, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21, 0x00, 0x21, 0x21,
};

const byte tetris[7][4][4] PROGMEM = {
   {  // cuadrdado                    
    {B11000000,   
     B11000000,    
     B00000000,    
     B00000000},
    {B11000000,   
     B11000000,    
     B00000000,    
     B00000000}, 
    {B11000000,   
     B11000000,    
     B00000000,    
     B00000000},
    {B11000000,   
     B11000000,    
     B00000000,    
     B00000000}
  },
  {   // palo                   
    {B01000000,   
     B01000000,    
     B01000000,    
     B01000000},
    {B01000000,   
     B01000000,    
     B01000000,    
     B01000000}, 
    {B00000000,   
     B11110000,    
     B00000000,    
     B00000000},
    {B01000000,   
     B01000000,    
     B01000000,    
     B01000000}
  },   
  {   // L                   
    {B10000000,   
     B10000000,    
     B11000000,    
     B00000000},
    {B11100000,   
     B10000000,    
     B00000000,    
     B00000000}, 
    {B11000000,   
     B01000000,    
     B01000000,    
     B00000000},
    {B00100000,   
     B11100000,    
     B00000000,    
     B00000000}
  },   
  {  //L invertida                    
    {B01000000,   
     B01000000,    
     B11000000,    
     B00000000},
    {B10000000,   
     B11100000,    
     B00000000,    
     B00000000}, 
    {B11000000,   
     B10000000,    
     B10000000,    
     B00000000},
    {B11100000,   
     B00100000,    
     B00000000,    
     B00000000}
  },   
  { // T                     
    {B01000000,   
     B11100000,    
     B00000000,    
     B00000000},
    {B10000000,   
     B11000000,    
     B10000000,    
     B00000000}, 
    {B11100000,   
     B01000000,    
     B00000000,    
     B00000000},
    {B01000000,   
     B11000000,    
     B01000000,    
     B00000000}
  },   
  { // Z                      
    {B11000000,   
     B01100000,    
     B00000000,    
     B00000000},
    {B01000000,   
     B11000000,    
     B10000000,    
     B00000000}, 
    {B11000000,   
     B01100000,    
     B00000000,    
     B00000000},
    {B01000000,   
     B11000000,    
     B10000000,    
     B00000000}
  },   
  { // Z invertida                     
    {B01100000,   
     B11000000,    
     B00000000,    
     B00000000},
    {B10000000,   
     B11000000,    
     B01000000,    
     B00000000}, 
    {B01100000,   
     B11000000,    
     B00000000,    
     B00000000},
    {B10000000,   
     B11000000,    
     B01000000,    
     B00000000}  
  }
};

const unsigned char animacionHelice[8][8] PROGMEM = {
{B10000001, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B10000001},  //  1
{B01000010, B11000011, B00000000, B00000000, B00000000, B00000000, B11000011, B01000010},  //  2
{B00100100, B00100100, B11100111, B00000000, B00000000, B11100111, B00100100, B00100100},  //  3
{B00011000, B00011000, B00011000, B11111111, B11111111, B00011000, B00011000, B00011000},  //  4
{B00100000, B00110000, B00010011, B00011110, B01111000, B11001000, B00001100, B00000100},  //  5
{B01000000, B01100011, B00110110, B00011100, B00111000, B01101100, B11000110, B00000010},  //  6
{B00000010, B11000110, B01101100, B00111000, B00011100, B00110110, B01100011, B01000000},  //  7
{B00000100, B00001100, B11001000, B01111000, B00011110, B00010011, B00110000, B00100000},  //  8
};

const unsigned char bard[] PROGMEM = {
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x32, 0x21, 0xCF, 0x9C, 0x5E, 0x3F, 0x32, 0x21, 0xCF, 0x9C, 0x5E, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x32, 0x21, 0xCF, 0x9C, 0x5E, 0xCF, 0x9C, 0x5E, 0x3F, 0x32, 0x21, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x5C, 0x50, 0x42, 0xAF, 0x80, 0x46, 0xAF, 0x80, 0x46, 0x5C, 0x50, 0x42, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x5C, 0x50, 0x42, 0x5C, 0x50, 0x42, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0xCE, 0xA3, 0x46, 0xB1, 0x88, 0x2F, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0xAF, 0x80, 0x46, 0xCF, 0x9C, 0x5E, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0xCF, 0x9C, 0x5E, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0xCF, 0x9C, 0x5E, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0xCF, 0x9C, 0x5E, 0xCF, 0x9C, 0x5E, 0xCF, 0x9C, 0x5E, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x4A, 0x4A, 0x4A, 0xCF, 0x9C, 0x5E, 0xCF, 0x9C, 0x5E, 0x10, 0x0D, 0x09, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x42, 0x33, 0x24, 0xCF, 0x9C, 0x5E, 0x10, 0x0D, 0x09, 0x42, 0x33, 0x24, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x70, 0x92, 0xBE, 0xCF, 0x9C, 0x5E, 0x24, 0x1C, 0x14, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x99, 0x85, 0x70, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x99, 0x85, 0x70, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x99, 0x85, 0x70, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x99, 0x85, 0x70, 0x71, 0x61, 0x50, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x99, 0x85, 0x70, 0x71, 0x61, 0x50, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0xCE, 0xA3, 0x46, 0x3F, 0x38, 0x31, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x3F, 0x38, 0x31, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x23, 0x1E, 0x1B, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x23, 0x1E, 0x1B, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x32, 0x21, 0xCF, 0x9C, 0x5E, 0x3F, 0x32, 0x21, 0xCF, 0x9C, 0x5E, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x32, 0x21, 0xAF, 0x80, 0x46, 0x3F, 0x32, 0x21, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x5C, 0x50, 0x42, 0x71, 0x61, 0x50, 0xAF, 0x80, 0x46, 0x71, 0x61, 0x50, 0x5C, 0x50, 0x42, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0xAF, 0x80, 0x46, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0xCF, 0x9C, 0x5E, 0xCF, 0x9C, 0x5E, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0xAF, 0x80, 0x46, 0xCF, 0x9C, 0x5E, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x42, 0x33, 0x24, 0xCF, 0x9C, 0x5E, 0xCF, 0x9C, 0x5E, 0x10, 0x0D, 0x09, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0xCF, 0x9C, 0x5E, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0xCF, 0x9C, 0x5E, 0x10, 0x0D, 0x09, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0x24, 0x1C, 0x14, 0xCF, 0x9C, 0x5E, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x24, 0x1C, 0x14, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0x24, 0x1C, 0x14, 0x71, 0x61, 0x50, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x24, 0x1C, 0x14, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x99, 0x85, 0x70, 0x99, 0x85, 0x70, 0x71, 0x61, 0x50, 0x99, 0x85, 0x70, 0x71, 0x61, 0x50, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x99, 0x85, 0x70, 0x99, 0x85, 0x70, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x99, 0x85, 0x70, 0x99, 0x85, 0x70, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0xCE, 0xA3, 0x46, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x23, 0x1E, 0x1B, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0xAF, 0x80, 0x46, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0xCF, 0x9C, 0x5E, 0xAF, 0x80, 0x46, 0x3F, 0x32, 0x21, 0xCF, 0x9C, 0x5E, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x32, 0x21, 0xCF, 0x9C, 0x5E, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x5C, 0x50, 0x42, 0x5C, 0x50, 0x42, 0xAF, 0x80, 0x46, 0x3F, 0x32, 0x21, 0x71, 0x61, 0x50, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0xCE, 0xA3, 0x46, 0xB1, 0x88, 0x2F, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x3F, 0x32, 0x21, 0xAF, 0x80, 0x46, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0xAF, 0x80, 0x46, 0xCF, 0x9C, 0x5E, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0xAF, 0x80, 0x46, 0xCF, 0x9C, 0x5E, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x42, 0x33, 0x24, 0xCF, 0x9C, 0x5E, 0xCF, 0x9C, 0x5E, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0xCF, 0x9C, 0x5E, 0xCF, 0x9C, 0x5E, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x4A, 0x4A, 0x4A, 0x42, 0x33, 0x24, 0x10, 0x0D, 0x09, 0x10, 0x0D, 0x09, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0x24, 0x1C, 0x14, 0xCF, 0x9C, 0x5E, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x42, 0x33, 0x24, 0x10, 0x0D, 0x09, 0x10, 0x0D, 0x09, 0x42, 0x33, 0x24, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x24, 0x1C, 0x14, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x71, 0x61, 0x50, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x99, 0x85, 0x70, 0x99, 0x85, 0x70, 0x71, 0x61, 0x50, 0x99, 0x85, 0x70, 0x71, 0x61, 0x50, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x99, 0x85, 0x70, 0x99, 0x85, 0x70, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x99, 0x85, 0x70, 0x99, 0x85, 0x70, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0xCE, 0xA3, 0x46, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x23, 0x1E, 0x1B, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x32, 0x21, 0xCF, 0x9C, 0x5E, 0x3F, 0x32, 0x21, 0x3F, 0x32, 0x21, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x32, 0x21, 0xCF, 0x9C, 0x5E, 0xAF, 0x80, 0x46, 0xCF, 0x9C, 0x5E, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x5C, 0x50, 0x42, 0xAF, 0x80, 0x46, 0xAF, 0x80, 0x46, 0x3F, 0x32, 0x21, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x5C, 0x50, 0x42, 0x5C, 0x50, 0x42, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0xCE, 0xA3, 0x46, 0xB1, 0x88, 0x2F, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0xAF, 0x80, 0x46, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0x71, 0x61, 0x50, 0xCF, 0x9C, 0x5E, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0xCF, 0x9C, 0x5E, 0xCF, 0x9C, 0x5E, 0xCF, 0x9C, 0x5E, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0xCF, 0x9C, 0x5E, 0xCF, 0x9C, 0x5E, 0xCF, 0x9C, 0x5E, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x4A, 0x4A, 0x4A, 0x42, 0x33, 0x24, 0x10, 0x0D, 0x09, 0xCF, 0x9C, 0x5E, 0x42, 0x33, 0x24, 0x42, 0x33, 0x24, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x42, 0x33, 0x24, 0x10, 0x0D, 0x09, 0xCF, 0x9C, 0x5E, 0x42, 0x33, 0x24, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x70, 0x92, 0xBE, 0xCF, 0x9C, 0x5E, 0x24, 0x1C, 0x14, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x24, 0x1C, 0x14, 0x99, 0x85, 0x70, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x99, 0x85, 0x70, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x99, 0x85, 0x70, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x99, 0x85, 0x70, 0x71, 0x61, 0x50, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x99, 0x85, 0x70, 0x71, 0x61, 0x50, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0xCE, 0xA3, 0x46, 0x3F, 0x38, 0x31, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x3F, 0x38, 0x31, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x23, 0x1E, 0x1B, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x23, 0x1E, 0x1B, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x3F, 0x38, 0x31, 0x23, 0x1E, 0x1B, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE, 0x70, 0x92, 0xBE,
};

// Mensaje marquesina de texto
const unsigned char scrollText[] PROGMEM ={"BIENVENIDOS AL CANAL JOA MT!"};

// Variables globales
byte r; byte g; byte b;
byte posTextoY=0;
byte posPac=0;
byte color = 3;

// Inicialización
void setup() {
  // Inicializamos los 300 leds 
  FastLED.addLeds<NEOPIXEL, DATA_PIN>(leds, NUM_LEDS);
  // Para unos pseudo-aleatorios más precisos
  randomSeed(analogRead(0));
}


// Bucle principal
void loop() {
  // Seleccionamos de entre una paleta de 16 colores fijos al azar en lugar de generar el rgb totalente
  // aleatorio para evitar colores retards y ahorrar muchas llamadas a ramndom(), que es lento de procesar
  // Elegimos colores con intensidad total entre 4 y 6 para que no haya demasiada diferencia luminica
  switch (color) {
    case 0: r=2; g=2; b=2; break; // Blanco
    case 1: r=4; g=0; b=0; break; // Rojo
    case 2: r=0; g=4; b=0; break; // Verde
    case 3: r=0; g=0; b=4; break; // Azul
    case 4: r=0; g=1; b=3; break; // Azul cielo
    case 5: r=0; g=3; b=2; break; // Verde-Azul
    case 6: r=0; g=3; b=1; break; // Verde-Azul suave
    case 7: r=1; g=3; b=0; break; // Amarillo verdoso
    case 8: r=3; g=3; b=0; break; // Amarillo intenso
    case 9: r=3; g=2; b=0; break; // Amarillo anaranjado
    case 10: r=3; g=1; b=0; break; // Naranja
    case 11: r=3; g=0; b=1; break; // Rosa
    case 12: r=3; g=0; b=2; break; // Rosita chillon
    case 13: r=3; g=0; b=3; break; // Rosita luminoso
    case 14: r=2; g=0; b=3; break; // Lila
    case 15: r=1; g=0; b=3; break; // Azul rosado
  }
  if (++color>15) { color=0; }
  bardAnimation();
  printImage();
  efectoMarquesinaTexto(scrollText, posTextoY);
  efectoPacMan(posPac);
  animacionTetris();
  efectoAnimacionHelice();
  if (++posTextoY>10) { posTextoY=0; }
  if (++posPac>9) { posPac=0; }
}

// Crea un efecto de marquesina de texto en la matriz led en una posicion y dada
void efectoMarquesinaTexto(const unsigned char * mensaje, byte posY){
  int posX=MATRIX_WIDTH; int finalEfecto=-writeText(mensaje, posX, posY)+MATRIX_WIDTH;
  while (posX>finalEfecto){
    writeText(mensaje, posX, posY);
    posX--; FastLED.show(); delay(50);
  }
}

// Devuelve la longitud total en pixeles del texto a dibujar en la matriz
// Escribe un texto en la matriz en una posicin x,y dada omitiendo las partes que queden fuera de la matriz
int writeText(const unsigned char * mensaje, int posX, byte posY) {
  int counter=0;
  // Iteramos por cada caracter de la cadena de texto hasta que no queden mas caracteres que pintar en pantalla
  do {
    // En función del caracter actual pintamos uno u otro dejando el espacio horizontal correcto para la sguiente letra que vendrá después
    switch (pgm_read_byte_near(mensaje + counter)) {
      case ' ': posX+=3; break;
      case 'A': printChar(abecedario[0],posX, posY); posX+=abecedario[0][9]; break;
      case 'B': printChar(abecedario[1],posX, posY); posX+=abecedario[1][9]; break;
      case 'C': printChar(abecedario[2],posX, posY); posX+=abecedario[2][9]; break;
      case 'D': printChar(abecedario[3],posX, posY); posX+=abecedario[3][9]; break;
      case 'E': printChar(abecedario[4],posX, posY); posX+=abecedario[4][9]; break;
      case 'F': printChar(abecedario[5],posX, posY); posX+=abecedario[5][9]; break;
      case 'G': printChar(abecedario[6],posX, posY); posX+=abecedario[6][9]; break;
      case 'H': printChar(abecedario[7],posX, posY); posX+=abecedario[7][9]; break;
      case 'I': printChar(abecedario[8],posX, posY); posX+=abecedario[8][9]; break;
      case 'J': printChar(abecedario[9],posX, posY); posX+=abecedario[9][9]; break;
      case 'K': printChar(abecedario[10],posX, posY); posX+=abecedario[10][9]; break;
      case 'L': printChar(abecedario[11],posX, posY); posX+=abecedario[11][9]; break;
      case 'M': printChar(abecedario[12],posX, posY); posX+=abecedario[12][9]; break;
      case 'N': printChar(abecedario[13],posX, posY); posX+=abecedario[13][9]; break;
      case 'O': printChar(abecedario[14],posX, posY); posX+=abecedario[14][9]; break;
      case 'P': printChar(abecedario[15],posX, posY); posX+=abecedario[15][9]; break;
      case 'Q': printChar(abecedario[16],posX, posY); posX+=abecedario[16][9]; break;
      case 'R': printChar(abecedario[17],posX, posY); posX+=abecedario[17][9]; break;
      case 'S': printChar(abecedario[18],posX, posY); posX+=abecedario[18][9]; break;
      case 'T': printChar(abecedario[19],posX, posY); posX+=abecedario[19][9]; break;
      case 'U': printChar(abecedario[20],posX, posY); posX+=abecedario[20][9]; break;
      case 'V': printChar(abecedario[21],posX, posY); posX+=abecedario[21][9]; break;
      case 'W': printChar(abecedario[22],posX, posY); posX+=abecedario[22][9]; break;
      case 'X': printChar(abecedario[23],posX, posY); posX+=abecedario[23][9]; break;
      case 'Y': printChar(abecedario[24],posX, posY); posX+=abecedario[24][9]; break;
      case 'Z': printChar(abecedario[25],posX, posY); posX+=abecedario[25][9]; break;
      /*Ñ*/case '}': printChar(abecedario[26],posX, posY); posX+=abecedario[26][9]; break;
      case '.': printChar(abecedario[27],posX, posY); posX+=abecedario[27][9]; break;
      case ',': printChar(abecedario[28],posX, posY); posX+=abecedario[28][9]; break;
      case '?': printChar(abecedario[29],posX, posY); posX+=abecedario[29][9]; break;
      /*¿*/case '{': printChar(abecedario[30],posX, posY); posX+=abecedario[30][9]; break;
      case '!': printChar(abecedario[31],posX, posY); posX+=abecedario[31][9]; break;
      case '0': printChar(abecedario[32],posX, posY); posX+=abecedario[32][9]; break;
      case '1': printChar(abecedario[33],posX, posY); posX+=abecedario[33][9]; break;
      case '2': printChar(abecedario[34],posX, posY); posX+=abecedario[34][9]; break;
      case '3': printChar(abecedario[35],posX, posY); posX+=abecedario[35][9]; break;
      case '4': printChar(abecedario[36],posX, posY); posX+=abecedario[36][9]; break;
      case '5': printChar(abecedario[37],posX, posY); posX+=abecedario[37][9]; break;
      case '6': printChar(abecedario[38],posX, posY); posX+=abecedario[38][9]; break;
      case '7': printChar(abecedario[39],posX, posY); posX+=abecedario[39][9]; break;
      case '8': printChar(abecedario[40],posX, posY); posX+=abecedario[40][9]; break;
      case '9': printChar(abecedario[41],posX, posY); posX+=abecedario[41][9]; break;
      case '-': printChar(abecedario[42],posX, posY); posX+=abecedario[42][9]; break;
      case 0: counter=-1; break; // Cuando no quedan mas caracteres que pintar ponemos el contador a -1 para salir del bucle
    }
  } while (++counter > 0); // Repetimos hasta que no haya mas caracteres que pintar
  return posX; // Devolvemos la longitud final que ocupa el texto que hemos escrito en la matriz
}

// Dibuja un caracter de 9 pixeles verticales en una posicion x,y dada
void printChar(unsigned char letra[], int posxScr, byte posY) {
  
  // Si la posición del caracter a pintar deja todos sus pixeles fuera de la matriz salimos sin pintar nada
  if (posxScr>MATRIX_WIDTH || posxScr<-5) { return; }
  
  // Iteramos 9 filas del caracter a pintar
  for(int row=0;row<9;row++) {
    // Iteramos 7 columnas del caracter a pintar
    for(int col=1;col<8;col++) {
      
      // Si la posicion horizontal de un pixel dado del caracter a pintar queda dentro de la matriz led
      if (posxScr+7-col<27 && posxScr+7-col>=0) {
        // Y si al leer el bit de la posicion de la fila y columna del caracter a pintar hay un 1
        if (bitRead(pgm_read_byte(&letra[row]),col)) {
           putLed(posxScr+7-col,row+posY,CRGB( r*32, g*32, b*32)); // Le damos color al led de la matrix correspondiente a la fila y columna que hemos leido
        }else { // Y si ese bit leido es 0
           putLed(posxScr+7-col,row+posY,CRGB( 0, 0, 0)); // Apagamos el led de esa posición
        }
      }
      
    }
  }
  
}

// Cambia el estado de un led de la matriz en una posicion x,y dada a un color determinado.
// Para controlar los 513 led conectados en serie consideramos que hay MATRIX_HEIGHT series de MATRIX_WIDTH leds
void putLed(unsigned int x,unsigned int y, CRGB color) {
  if (x>=0 && x<MATRIX_WIDTH && y>=0 && y<MATRIX_HEIGHT) {
    leds[y*MATRIX_WIDTH+x] = color;
  }
}


// Volcamos la información del array que representa una imagen directamente en la matriz
// El array debe estar compuesto por valores de 8bits (char) separados en cada componente de color
// Por ejemplo, los tres primeros valores conforman el primer pixel (componentes color rojo, verde y azul)
// Y así sucesivamente, cada 3 valores es un pixel
void printImage() {
  for (byte rows=0;rows<MATRIX_HEIGHT;rows++){
    for (byte cols=0;cols<MATRIX_WIDTH;cols++){      
      leds[rows*MATRIX_WIDTH+cols] = CRGB(
        pgm_read_byte(ledarray + (3*(rows*MATRIX_WIDTH+cols)))/3,
        pgm_read_byte(ledarray + (3*(rows*MATRIX_WIDTH+cols))+1)/3,
        pgm_read_byte(ledarray + (3*(rows*MATRIX_WIDTH+cols))+2)/3
      );
    }
  }
  FastLED.show(); delay(5000); cleanMatrix();
}

// Apagamos todos los leds
void cleanMatrix() {
  for (byte rows=0;rows<MATRIX_HEIGHT;rows++){
    for (byte cols=0;cols<MATRIX_WIDTH;cols++){
      leds[rows*MATRIX_WIDTH+cols] = CRGB(0,0,0);
    }
  }
  FastLED.show();
}

// Crea un efecto de marquesina de texto en la matriz led en una posicion y dada
void efectoPacMan(byte posY){
  int posX=-10; byte frame=0;
  while (posX<55){
    printSprite(pacman[frame], posX, posY, 10, CRGB( 0, 0, 0));
    printSprite(fantasma[frame%2], posX-12, posY, 10, CRGB( 0, 0, 0));
    printSprite(fantasma[frame%2], posX-22, posY, 10, CRGB( 0, 0, 0));
    posX++; if (++frame>3) { frame=0; }
    if (posX<-4) {putSquare(0,posY+4,2,posY+6,CRGB( r*32, g*32, b*32)); }
    if (posX<4) {putSquare(8,posY+4,10,posY+6,CRGB( r*32, g*32, b*32)); }
    if (posX<12) {putSquare(16,posY+4,18,posY+6,CRGB( r*32, g*32, b*32)); }
    if (posX<20) {putSquare(24,posY+4,26,posY+6,CRGB( r*32, g*32, b*32)); }
    printSprite(pacman[frame], posX, posY, 10, CRGB( b*32, r*32, g*32));
    printSprite(fantasma[frame%2], posX-12, posY, 10, CRGB( g*32, b*32, r*32));
    printSprite(fantasma[frame%2], posX-22, posY, 10, CRGB( g*32, r*32, b*32));
    FastLED.show();delay(100);
  }
}

// Dibuja un sprite de tamao ajustable en una posicion x,y dada
void printSprite(unsigned char sprite[], int posxScr, byte posY, byte vTam, CRGB color) {
  
  // Iteramos vTam filas del caracter a pintar
  for(int row=0;row<vTam;row++) {
    // Iteramos 7 columnas del caracter a pintar
    for(int col=0;col<8;col++) {
      // si al leer el bit de la posicion de la fila y columna del caracter a pintar hay un 1
      if (bitRead(pgm_read_byte(&sprite[row]),col)) {
        putLed(posxScr+7-col,row+posY,color); // Le damos color al led de la matrix correspondiente a la fila y columna que hemos leido
      }

    }
  }
  
}


// Dibuja un cuadrado con unas dimensiones y color
void putSquare(unsigned int x,unsigned int y, unsigned int fx,unsigned int fy, CRGB color) {
  if (fx<=x || fy<=y) { return; }
  for(int row=x;row<fx;row++) {
    for(int col=y;col<fy;col++) {
      putLed(row,col, color);
    }
  }
}

void animacionTetris() {
  int fotograma=0; int posy=0; int posy2=-10; int posx=4; int posx2=4;
  int numficha=1; int estado=0; int numficha2=0; int estado2=0;
  byte r2; byte g2; byte b2; byte r3; byte g3; byte b3; byte r4; byte g4; byte b4;
  int posy3=-1; int posy4=-9; int posx3=10; int posx4=10;
  int posy5=0; int posy6=-11; int posx5=14; int posx6=20;
  int numficha3=6; int estado3=0; int numficha4=2; int estado4=0;
  int numficha5=1; int estado5=0; int numficha6=6; int estado6=0;
  int posx7=4; int posx8=14; int posx9=22;
  int posy7=-15; int posy8=-16; int posy9=-17;
  int numficha7=4; int estado7=0; int numficha8=5; int estado8=0;
  int numficha9=3; int estado9=0;
  
  switch (random(16)) {
    case 0: r2=2; g2=2; b2=2; break; // Blanco
    case 1: r2=4; g2=0; b2=0; break; // Rojo
    case 2: r2=0; g2=4; b2=0; break; // Verde
    case 3: r2=0; g2=0; b2=4; break; // Azul
    case 4: r2=0; g2=1; b2=3; break; // Azul cielo
    case 5: r2=0; g2=3; b2=2; break; // Verde-Azul
    case 6: r2=0; g2=3; b2=1; break; // Verde-Azul suave
    case 7: r2=1; g2=3; b2=0; break; // Amarillo verdoso
    case 8: r2=3; g2=3; b2=0; break; // Amarillo intenso
    case 9: r2=3; g2=2; b2=0; break; // Amarillo anaranjado
    case 10: r2=3; g2=1; b2=0; break; // Naranja
    case 11: r2=3; g2=0; b2=1; break; // Rosa
    case 12: r2=3; g2=0; b2=2; break; // Rosita chillon
    case 13: r2=3; g2=0; b2=3; break; // Rosita luminoso
    case 14: r2=2; g2=0; b2=3; break; // Lila
    case 15: r2=1; g2=0; b2=3; break; // Azul rosado
  }

  switch (random(16)) {
    case 0: r4=2; g4=2; b4=2; break; // Blanco
    case 1: r4=4; g4=0; b4=0; break; // Rojo
    case 2: r4=0; g4=4; b4=0; break; // Verde
    case 3: r4=0; g4=0; b4=4; break; // Azul
    case 4: r4=0; g4=1; b4=3; break; // Azul cielo
    case 5: r4=0; g4=3; b4=2; break; // Verde-Azul
    case 6: r4=0; g4=3; b4=1; break; // Verde-Azul suave
    case 7: r4=1; g4=3; b4=0; break; // Amarillo verdoso
    case 8: r4=3; g4=3; b4=0; break; // Amarillo intenso
    case 9: r4=3; g4=2; b4=0; break; // Amarillo anaranjado
    case 10: r4=3; g4=1; b4=0; break; // Naranja
    case 11: r4=3; g4=0; b4=1; break; // Rosa
    case 12: r4=3; g4=0; b4=2; break; // Rosita chillon
    case 13: r4=3; g4=0; b4=3; break; // Rosita luminoso
    case 14: r4=2; g4=0; b4=3; break; // Lila
    case 15: r4=1; g4=0; b4=3; break; // Azul rosado
  }
  switch (random(16)) {
    case 0: r3=2; g3=2; b3=2; break; // Blanco
    case 1: r3=4; g3=0; b3=0; break; // Rojo
    case 2: r3=0; g3=4; b3=0; break; // Verde
    case 3: r3=0; g3=0; b3=4; break; // Azul
    case 4: r3=0; g3=1; b3=3; break; // Azul cielo
    case 5: r3=0; g3=3; b3=2; break; // Verde-Azul
    case 6: r3=0; g3=3; b3=1; break; // Verde-Azul suave
    case 7: r3=1; g3=3; b3=0; break; // Amarillo verdoso
    case 8: r3=3; g3=3; b3=0; break; // Amarillo intenso
    case 9: r3=3; g3=2; b3=0; break; // Amarillo anaranjado
    case 10: r3=3; g3=1; b3=0; break; // Naranja
    case 11: r3=3; g3=0; b3=1; break; // Rosa
    case 12: r3=3; g3=0; b3=2; break; // Rosita chillon
    case 13: r3=3; g3=0; b3=3; break; // Rosita luminoso
    case 14: r3=2; g3=0; b3=3; break; // Lila
    case 15: r3=1; g3=0; b3=3; break; // Azul rosado
  }
  
  while (++fotograma<160){
    printSprite(tetris[numficha][estado], posx, posy, 4, CRGB( b2*32, r2*32, g2*32));
    printSprite(tetris[numficha2][estado2], posx2, posy2, 4, CRGB( b3*32, r3*32, g3*32));
    printSprite(tetris[numficha3][estado3], posx3, posy3, 4, CRGB( b4*32, r4*32, g4*32));
    printSprite(tetris[numficha4][estado4], posx4, posy4, 4, CRGB( b3*32, r3*32, g3*32));
    printSprite(tetris[numficha5][estado5], posx5, posy5, 4, CRGB( b2*32, r2*32, g2*32));
    printSprite(tetris[numficha6][estado6], posx6, posy6, 4, CRGB( b4*32, r4*32, g4*32));
    printSprite(tetris[numficha7][estado7], posx7, posy7, 4, CRGB( b2*32, r2*32, g2*32));
    printSprite(tetris[numficha8][estado8], posx8, posy8, 4, CRGB( b4*32, r4*32, g4*32));
    printSprite(tetris[numficha9][estado9], posx9, posy9, 4, CRGB( b3*32, r3*32, g3*32));
    FastLED.show();
    printSprite(tetris[numficha][estado], posx, posy, 4, CRGB( 0, 0, 0));
    printSprite(tetris[numficha2][estado2], posx2, posy2, 4, CRGB( 0, 0, 0));
    printSprite(tetris[numficha3][estado3], posx3, posy3, 4, CRGB( 0, 0, 0));
    printSprite(tetris[numficha4][estado4], posx4, posy4, 4, CRGB( 0, 0, 0));
    printSprite(tetris[numficha5][estado5], posx5, posy5, 4, CRGB( 0, 0, 0));
    printSprite(tetris[numficha6][estado6], posx6, posy6, 4, CRGB( 0, 0, 0));
    printSprite(tetris[numficha7][estado7], posx7, posy7, 4, CRGB( 0, 0, 0));
    printSprite(tetris[numficha8][estado8], posx8, posy8, 4, CRGB( 0, 0, 0));
    printSprite(tetris[numficha9][estado9], posx9, posy9, 4, CRGB( 0, 0, 0));
    if (++posy>MATRIX_HEIGHT) {
      posy=-4;
      numficha=random(6);
      estado=random(3);
      posx=random(8);
    }
    if (++posy2>MATRIX_HEIGHT) {
      posy2=-4;
      numficha2=random(6);
      estado2=random(3);
      posx2=random(8);
    }
    if (++posy3>MATRIX_HEIGHT) {
      posy3=-4;
      numficha3=random(6);
      estado3=random(3);
      posx3=random(8)+9;
    }
    if (++posy4>MATRIX_HEIGHT) {
      posy4=-4;
      numficha4=random(6);
      estado4=random(3);
      posx4=random(8)+9;
    }
    if (++posy5>MATRIX_HEIGHT) {
      posy5=-4;
      numficha5=random(6);
      estado5=random(3);
      posx5=random(8)+18;
    }
    if (++posy6>MATRIX_HEIGHT) {
      posy6=-4;
      numficha6=random(6);
      estado6=random(3);
      posx6=random(8)+18;
    }
    if (++posy7>MATRIX_HEIGHT) {
      posy7=-4;
      numficha7=random(6);
      estado7=random(3);
      posx7=random(8);
    }
    if (++posy8>MATRIX_HEIGHT) {
      posy8=-4;
      numficha8=random(6);
      estado8=random(3);
      posx8=random(8)+9;
    }
    if (++posy9>MATRIX_HEIGHT) {
      posy9=-4;
      numficha9=random(6);
      estado9=random(3);
      posx9=random(8)+18;
    }
    delay(100);  
  }
  cleanMatrix();
}

void efectoAnimacionHelice() {
  int fotograma=-1; int posy=2; int posx=1; int incx=1; int incy=1;
  while (++fotograma<4){
    printSprite(animacionHelice[fotograma], posx, posy, 8, CRGB( b*32, r*32, g*32));
    FastLED.show();
    printSprite(animacionHelice[fotograma], posx, posy, 8, CRGB( b*0, r*0, g*0));
    delay(100);
  }
  while (++fotograma<160){
    printSprite(animacionHelice[3+(fotograma%5)], posx, posy, 8, CRGB( b*32, r*32, g*32));
    FastLED.show();
    printSprite(animacionHelice[3+(fotograma%5)], posx, posy, 8, CRGB( b*0, r*0, g*0));
    delay(100);
    
    if (posx>(MATRIX_WIDTH-9) || posx<1) {
      incx=-incx;
    }
    if (posy>(MATRIX_HEIGHT-9) || posy<1) {
      incy=-incy;
    }
    posx+=incx; posy+=incy;
  }
}

void bardAnimation() {
  int fotograma=0;
  while(++fotograma<150){
    for (byte rows=0;rows<MATRIX_HEIGHT;rows++){
      for (byte cols=0;cols<MATRIX_WIDTH;cols++){      
        leds[rows*27+cols] = CRGB(
          pgm_read_byte(bard + ((3*NUM_LEDS)*(fotograma%4)) + (3*(rows*MATRIX_WIDTH+cols)))/4,
          pgm_read_byte(bard + ((3*NUM_LEDS)*(fotograma%4)) + (3*(rows*MATRIX_WIDTH+cols))+1)/4,
          pgm_read_byte(bard + ((3*NUM_LEDS)*(fotograma%4)) + (3*(rows*MATRIX_WIDTH+cols))+2)/4
        );
      }
    }
    FastLED.show();delay(100);
  }
}
